{
	"name": "FactEpisode",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTableEpisode",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableFactEpisode",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableDimTitle_aksh",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          TCONST as string,",
				"          PARENTTCONST as string,",
				"          SEASONNUMBER as decimal(38,0),",
				"          EPISODENUMBER as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source1",
				"source(output(",
				"          EPISODEKEY as decimal(18,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select NVL(MAX(EPISODEKEY),0) AS EPISODEKEY FROM IMDB_SCHEMA.FACTEPISODES',",
				"     format: 'query') ~> source2",
				"source(output(",
				"          TITLEKEY as decimal(10,0),",
				"          TCONST as string,",
				"          TITLETYPE as string,",
				"          PRIMARYTITLE as string,",
				"          ORIGINALTITLE as string,",
				"          ISADULT as string,",
				"          STARTYEAR as string,",
				"          ENDYEAR as string,",
				"          RUNTIMEMINUTES as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source3",
				"source1, source3 join(source1@TCONST == source3@TCONST,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(episodeKey = TITLEKEY) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          TCONST = source1@TCONST,",
				"          PARENTTCONST,",
				"          SEASONNUMBER,",
				"          EPISODENUMBER,",
				"          episodeKey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, source3 lookup(PARENTTCONST == source3@TCONST,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1"
			]
		}
	}
}